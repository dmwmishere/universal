<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<context:property-placeholder location="file:basic.properties" />
	<context:component-scan base-package="org.dmwm.universal" />
	
	<aop:aspectj-autoproxy />
	
	<bean id="properties"
		class="org.apache.camel.component.properties.PropertiesComponent">
		<property name="location" value="file:basic.properties" />
	</bean>
	
	<!-- Connect 2 database -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.uname}" />
		<property name="password" value="${jdbc.pswd}" />
	</bean>

	<!-- Map bean sample -->
	<bean id="sharedMap" class="java.util.HashMap">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="java.lang.Long" />
		</constructor-arg>
	</bean>

	<!-- Holds statistics -->
	<bean id="statsHolder" class="org.dmwm.universal.core.stats.StatsHolderImpl">
		<constructor-arg value="testMeasure" />
	</bean>

	<bean id="cfA" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" /> <!-- ?broker.persistent=false -->
	</bean>

	<bean id="activemqA" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="connectionFactory" ref="cfA" />
		<property name="asyncConsumer" value="true" />
	</bean>

	<bean id="gzpacker" class="org.dmwm.universal.sys1.processors.GzPacker" />
	<bean id="nfgen" class="org.dmwm.universal.sys1.processors.NFGenerator" />
	<bean id="soapproc" class="org.dmwm.universal.sys1.processors.SOAPProcessor" />

	<bean id="nfconsume" class="org.dmwm.universal.sys2.processors.MemeRequestHandler" />
	<bean id="resp" class="org.dmwm.universal.sys2.processors.MemeResponder" />


	<cxf:cxfEndpoint id="customerServiceEndpoint" address="http://localhost:9090/memeSender"
		serviceName="s:customer:MemeSender" serviceClass="org.dmwm.universal.sys1.ws.MemeSender"
		xmlns:s="http://notsoclever.cc/customerService" />

	<camelContext xmlns="http://camel.apache.org/schema/spring">

		<!-- Setting up default thread pool -->
		<threadPoolProfile id="defaultThreadPoolProfile"
			defaultProfile="true" poolSize="20" maxPoolSize="40" maxQueueSize="500"
			allowCoreThreadTimeOut="false" rejectedPolicy="CallerRuns" />
		<dataFormats>
			<jaxb id="ds" prettyPrint="true" contextPath="org.dmwm.universal.sys1.data.xsds" />
		</dataFormats>

		<!-- Sending executed operations into influx -->
		<route id="send2influx" autoStartup="true">
			<from uri="timer://foo?fixedRate=true&amp;period={{influx.period}}" />
			<bean ref="statsHolder" method="getAllInfluxStats(true, {{influx.period}})" />
			<filter>
				<simple>${in.body} != "" and ${in.body} != null</simple>
				<setHeader headerName="CamelHttpMethod">
					<constant>POST</constant>
				</setHeader>
				<to uri="http://{{influx.url}}/write?db={{influx.db}}" />
			</filter>
		</route>

		<!-- SYS-1: generate file and send MemeRq -->
		<route id="soap-receiver" autoStartup="true">
			<from uri="cxf:bean:customerServiceEndpoint" />
			<process ref="soapproc" />
			<multicast parallelProcessing="false">
				<to uri="direct:generateFile" />
				<to uri="direct:generateNf" />
			</multicast>
			<unmarshal ref="ds" />
		</route>

		<route id="file-generator">
			<from uri="direct:generateFile" />
			<process ref="gzpacker" />
			<to uri="file:GENERATED" />
		</route>

		<route id="notif-generator">
			<from uri="direct:generateNf" />
			<process ref="nfgen" />
			<marshal ref="ds" />
			<inOnly uri="activemqA:queue:MEME.IN" />
		</route>

		<!-- SYS-2: Consuming notifications and files -->
		<route id="notif-consumer" autoStartup="true">
			<from uri="activemqA:queue:MEME.IN" />
			<threads>
				<process ref="nfconsume" />
				<multicast>
					<to uri="direct:enricher" />
					<to uri="direct:responder" />
				</multicast>
			</threads>
		</route>

		<route>
			<from uri="direct:enricher" />
			<pollEnrich timeout="5000">
				<simple>file:GENERATED?fileName=${header.CamelFileName}&amp;delete=true</simple> <!-- &amp;noop=true&amp;idempotent=false -->
			</pollEnrich>
			<log message="Coping file..." loggingLevel="DEBUG" />
			<to uri="file:COPIED?fileName=${header.CamelFileName}" />
			<bean ref="statsHolder" method="putStat(SYS-2-FILE_RECEIVED)" />
		</route>

		<route>
			<from uri="direct:responder" />
			<process ref="resp" />
			<marshal ref="ds" />
			<to uri="activemqA:queue:MEME.OUT" />
		</route>

	</camelContext>
</beans>