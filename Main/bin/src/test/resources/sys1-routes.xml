<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:aop="http://www.springframework.org/schema/aop"
	xsd:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<bean id="gzpacker" class="org.dmwm.universal.sys1.processors.GzPacker" />
	<bean id="nfgen" class="org.dmwm.universal.sys1.processors.NFGenerator" />
	<bean id="soapproc" class="org.dmwm.universal.sys1.processors.SOAPProcessor" />
	<bean id="soapproc_stub" class="org.dmwm.universal.sys1.processors.SOAPProcessor_stub" />

<!--
	Get data from influxX:
	influx -execute "select time, operation, value from testMeasure limit 10;" -database testdb -format=csv 
	
	sample query:
	select count(value) from testMeasure where time > now() - 7d group by operation, time(1d) fill(666)
	influx -execute "select count(value) from testMeasure where time > now() - 7d group by operation, time(1d) fill(666)" -database testdb -format=csv 
	
	
-->

	<cxf:cxfEndpoint id="weather"
		address="http://www.webservicex.com/globalweather.asmx" serviceClass="net.webservicex.GlobalWeatherSoap"
		serviceName="ws:GlobalWeatherSoap" loggingFeatureEnabled="true">
		<cxf:properties>
			<entry key="dataFormat" value="POJO" />
		</cxf:properties>
		<cxf:features>
			<bean class="org.apache.cxf.transport.common.gzip.GZIPFeature" />
		</cxf:features>
	</cxf:cxfEndpoint>
	<!-- cxf:cxfEndpoint id="weather"
		address="http://secure.smartbearsoftware.com/samples/testcomplete10/webservices/Service.asmx" 
		wsdlURL="http://secure.smartbearsoftware.com/samples/testcomplete10/webservices/Service.asmx?wsdl"
		endpointName="ws:SampleWebServiceSoap" loggingFeatureEnabled="true">
		<cxf:properties>
			<entry key="dataFormat" value="PAYLOAD" />
		</cxf:properties>
		<cxf:features>
			<bean class="org.apache.cxf.transport.common.gzip.GZIPFeature" />
		</cxf:features>
	</cxf:cxfEndpoint -->

	<!-- cxf:cxfEndpoint id="weather"
		address="http://localhost:8080/UniversalWeb/webservices/memeInterfaze" 
		wsdlURL="/home/dmwm/Java-projects/CamelSample/Core/src/main/resources/xsds/memeInterfaze.wsdl"
		loggingFeatureEnabled="true">
		<cxf:properties>
			<entry key="dataFormat" value="MESSAGE" />
		</cxf:properties>
	</cxf:cxfEndpoint -->


	<routeContext id="sys1-routes" xmlns="http://camel.apache.org/schema/spring">

		<!-- SYS-1: generate file and send MemeRq -->

		<route id="sys1-soap-receiver" autoStartup="true" startupOrder="2">
			<from uri="direct:test_input1" />
			<from
				uri="cxf:/memeSender?serviceClass=org.dmwm.universal.sys1.ws.MemeSender" />
			<choice>
				<when>
					<simple>${header.operationName} == 'addMeme'</simple>
					<log message="WS BOdY: ${in.body}*" />
					<process ref="soapproc_stub" />
					<setHeader headerName="operationName">
						<constant>GetCitiesByCountry</constant>
					</setHeader>
					<setHeader headerName="operationNamespace">
						<constant>http://www.webserviceX.NET</constant>
					</setHeader>
					<to uri="cxf:bean:weather" />
					<!-- convertBodyTo type="java.lang.String" charset="utf-8" / -->
				</when>
				<otherwise>
					<process ref="soapproc" />
					<multicast parallelProcessing="false">
						<to uri="direct:generateFile" />
						<to uri="direct:generateNf" />
					</multicast>
					<unmarshal ref="ds" />
				</otherwise>
			</choice>

		</route>

		<route id="sys1-file-generator">
			<from uri="direct:generateFile" />
			<process ref="gzpacker" />
			<to uri="stub:file:GENERATED" />
			<to uri="mock:result_sys1_file" />
		</route>

		<route id="sys1-notif-generator">
			<from uri="direct:generateNf" />
			<process ref="nfgen" />
			<marshal ref="ds" />
			<to uri="stub:activemqA:queue:MEME.IN?replyTo=MEME.OUT" />
			<to uri="mock:result_sys1_message" />
		</route>

	</routeContext>

</beans>